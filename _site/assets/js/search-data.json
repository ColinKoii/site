{"0": {
    "doc": "Balance",
    "title": "Balance",
    "content": "## Balance {: .fs-9 } The 'balance' method contains a function for retrieving the balance of a specific wallet from the state of the NFT object. The section below shows an example of a possible balance function: ```bash export default function balance(state, action) { const input = action.input; const caller = action.caller; let target; if (input.target) { target = input.target; } else { target = caller; } const ticker = state.ticker; const balances = state.balances; ContractAssert( typeof target === \"string\", `Must specify target to retrieve balance for.` ); return { result: { target, ticker, balance: target in balances ? balances[target] : 0 } }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Balance/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Balance/"
  },"1": {
    "doc": "(optional) Bridging Support",
    "title": "(optional) Bridging Support",
    "content": "## Bridging Support {: .fs-9 } The 'bridging support' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Bridging-Support/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Bridging-Support/"
  },"2": {
    "doc": "(optional) Dynamic",
    "title": "(optional) Dynamic",
    "content": "## Dynamic {: .fs-9 } The 'dynamic' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Dynamic/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Dynamic/"
  },"3": {
    "doc": "Example deployment script",
    "title": "Example deployment script",
    "content": "# Labels Use labels as a way to add an additional mark to a section of your docs. Labels come in a few colors. By default, labels will be blue. Default label {: .label } Blue label {: .label .label-blue } Stable {: .label .label-green } New release {: .label .label-purple } Coming soon {: .label .label-yellow } Deprecated {: .label .label-red } ```markdown Default label {: .label } Blue label {: .label .label-blue } Stable {: .label .label-green } New release {: .label .label-purple } Coming soon {: .label .label-yellow } Deprecated {: .label .label-red } ``` ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/Example-deployment-script/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/Example-deployment-script/"
  },"4": {
    "doc": "General definition of an atomic NFT",
    "title": "General definition of an atomic NFT",
    "content": " ",
    "url": "https://atomicnft.com/docs/General-definition-of-an-atomic-NFT/",
    "relUrl": "/docs/General-definition-of-an-atomic-NFT/"
  },"5": {
    "doc": "How to deploy an Atomic NFT",
    "title": "How to deploy an Atomic NFT",
    "content": "# UI Components To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. {: .fs-6 .fw-300 } ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT"
  },"6": {
    "doc": "How to get AR",
    "title": "How to get AR",
    "content": "# Tables Tables are responsive by default, allowing wide tables to have a horizontal scroll to access columns outside of the normal viewport. | head1 | head two | three |:-------------|:------------------|:------| ok | good swedish fish | nice | out of stock | good and plenty | nice | ok | good `oreos` | hmm | ok | good `zoute` drop | yumm | ```markdown | head1 | head two | three |:-------------|:------------------|:------| ok | good swedish fish | nice | out of stock | good and plenty | nice | ok | good `oreos` | hmm | ok | good `zoute` drop | yumm | ``` ",
    "url": "https://atomicnft.com/https:/koi.rocks/faucet",
    "relUrl": "/https:/koi.rocks/faucet"
  },"7": {
    "doc": "Key Security",
    "title": "Key Security",
    "content": " ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/Key-Security/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/Key-Security/"
  },"8": {
    "doc": "Owning and Storing Atomic NFTs",
    "title": "Owning and Storing Atomic NFTs",
    "content": " ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs"
  },"9": {
    "doc": "Required features of an atomic NFT",
    "title": "Required features of an atomic NFT",
    "content": "### Required features of an atomic NFT {: .fs-9 } ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT"
  },"10": {
    "doc": "The Finnie Wallet",
    "title": "The Finnie Wallet",
    "content": " ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/The-Finnie-Wallet/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/The-Finnie-Wallet/"
  },"11": {
    "doc": "Transfer",
    "title": "Transfer",
    "content": "## Transfer {: .fs-9 } The 'transfer' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash export default function transfer(state, action) { const input = action.input; const caller = action.caller; const target = input.target; ContractAssert(target, `No target specified.`); ContractAssert(caller !== target, `Invalid token transfer.`); const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const balances = state.balances; ContractAssert( caller in balances && balances[caller] >= qty, `Caller has insufficient funds` ); balances[caller] -= qty; if (!(target in balances)) { balances[target] = 0; } balances[target] += qty; state.balances = balances; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Transfer/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Transfer/"
  },"12": {
    "doc": "Using-a-Wallet",
    "title": "Using-a-Wallet",
    "content": " ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/Using-a-Wallet/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/Using-a-Wallet/"
  },"13": {
    "doc": "What is Arweave?",
    "title": "What is Arweave?",
    "content": " ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/What-is-Arweave/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/What-is-Arweave/"
  },"14": {
    "doc": "What is smartweave?",
    "title": "What is smartweave?",
    "content": " ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/What-is-smartweave/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/What-is-smartweave/"
  },"15": {
    "doc": "Home",
    "title": "Home",
    "content": "# Focus on writing good documentation {: .fs-9 } Just the Docs gives your documentation a jumpstart with a responsive Jekyll theme that is easily customizable and hosted on GitHub Pages. {: .fs-6 .fw-300 } [Get started now](#getting-started){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 } [View it on GitHub](https://github.com/pmarsceill/just-the-docs){: .btn .fs-5 .mb-4 .mb-md-0 } --- ## Getting started ### Dependencies Just the Docs is built for [Jekyll](https://jekyllrb.com), a static site generator. View the [quick start guide](https://jekyllrb.com/docs/) for more information. Just the Docs requires no special plugins and can run on GitHub Pages' standard Jekyll compiler. The [Jekyll SEO Tag plugin](https://github.com/jekyll/jekyll-seo-tag) is included by default (no need to run any special installation) to inject SEO and open graph metadata on docs pages. For information on how to configure SEO and open graph metadata visit the [Jekyll SEO Tag usage guide](https://jekyll.github.io/jekyll-seo-tag/usage/). ### Quick start: Use as a GitHub Pages remote theme 1. Add Just the Docs to your Jekyll site's `_config.yml` as a [remote theme](https://blog.github.com/2017-11-29-use-any-theme-with-github-pages/) ```yaml remote_theme: pmarsceill/just-the-docs ``` You must have GitHub Pages enabled on your repo, one or more Markdown files, and a `_config.yml` file. [See an example repository](https://github.com/pmarsceill/jtd-remote) ### Local installation: Use the gem-based theme 1. Install the Ruby Gem ```bash $ gem install just-the-docs ``` ```yaml # .. or add it to your your Jekyll site’s Gemfile gem \"just-the-docs\" ``` 2. Add Just the Docs to your Jekyll site’s `_config.yml` ```yaml theme: \"just-the-docs\" ``` 3. _Optional:_ Initialize search data (creates `search-data.json`) ```bash $ bundle exec just-the-docs rake search:init ``` 3. Run you local Jekyll server ```bash $ jekyll serve ``` ```bash # .. or if you're using a Gemfile (bundler) $ bundle exec jekyll serve ``` 4. Point your web browser to [http://localhost:4000](http://localhost:4000) If you're hosting your site on GitHub Pages, [set up GitHub Pages and Jekyll locally](https://help.github.com/en/articles/setting-up-your-github-pages-site-locally-with-jekyll) so that you can more easily work in your development environment. ### Configure Just the Docs --- ## About the project Just the Docs is &copy; 2017-{{ \"now\" | date: \"%Y\" }} by [Patrick Marsceill](http://patrickmarsceill.com). ### License Just the Docs is distributed by an [MIT license](https://github.com/pmarsceill/just-the-docs/tree/master/LICENSE.txt). ### Contributing When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Read more about becoming a contributor in [our GitHub repo](https://github.com/pmarsceill/just-the-docs#contributing). #### Thank you to the contributors of Just the Docs! . {% for contributor in site.github.contributors %} | {% endfor %} . ### Code of Conduct Just the Docs is committed to fostering a welcoming community. [View our Code of Conduct](https://github.com/pmarsceill/just-the-docs/tree/master/CODE_OF_CONDUCT.md) on our GitHub repository. ",
    "url": "https://atomicnft.com/",
    "relUrl": "/"
  },"16": {
    "doc": "Lock",
    "title": "Lock",
    "content": "## Lock {: .fs-9 } The 'Lock' method contains a function for The section below shows an example of a possible lock function: ```bash export default function lock(state, action) { const input = action.input; const caller = action.caller; const delegatedOwner = input.delegatedOwner; ContractAssert(delegatedOwner, `No target specified.`); const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const balances = state.balances; ContractAssert( caller in balances && balances[caller] >= qty, `Caller has insufficient funds` ); balances[caller] -= qty; if (!(delegatedOwner in balances)) { balances[delegatedOwner] = 0; } balances[delegatedOwner] += qty; const ethOwnerAddress = input.ethOwnerAddress; ContractAssert(ethOwnerAddress, `No ethereum address specified.`); state.ethOwnerAddress = ethOwnerAddress; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/lock/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/lock/"
  },"17": {
    "doc": "Unlock",
    "title": "Unlock",
    "content": "## Unlock {: .fs-9 } The 'Unlock' method contains a function for The section below shows an example of a possible lock function: ```bash export default function unlock(state, action) { const input = action.input; const balances = state.balances; const addresses = Object.keys(balances); for (const address of addresses) { delete balances[address]; } const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const arweaveAddress = input.arweaveAddress; ContractAssert(arweaveAddress, `No arweaveAddress specified.`); if (!(arweaveAddress in balances)) { balances[arweaveAddress] = 0; } balances[arweaveAddress] += qty; delete state.ethOwnerAddress; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/unlock/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/unlock/"
  }
}
