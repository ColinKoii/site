{"0": {
    "doc": "Balance",
    "title": "Balance",
    "content": "## Balance {: .fs-9 } The 'balance' method contains a function for retrieving the balance of a specific wallet from the state of the NFT object. The section below shows an example of a possible balance function: ```bash export default function balance(state, action) { const input = action.input; const caller = action.caller; let target; if (input.target) { target = input.target; } else { target = caller; } const ticker = state.ticker; const balances = state.balances; ContractAssert( typeof target === \"string\", `Must specify target to retrieve balance for.` ); return { result: { target, ticker, balance: target in balances ? balances[target] : 0 } }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Balance/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Balance/"
  },"1": {
    "doc": "(optional) Bridging Support",
    "title": "(optional) Bridging Support",
    "content": "## Bridging Support {: .fs-9 } The 'bridging support' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Bridging-Support/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Bridging-Support/"
  },"2": {
    "doc": "(optional) Dynamic",
    "title": "(optional) Dynamic",
    "content": "## Dynamic {: .fs-9 } The 'dynamic' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Dynamic/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Dynamic/"
  },"3": {
    "doc": "Example deployment script",
    "title": "Example deployment script",
    "content": "# Example deployment script This one was founded at [here](https://cedriking.medium.com/lets-buidl-smartweave-contracts-6353d22c4561){:target = \"_blank\"}. ```bash import Arweave from 'arweave'; const arweave = Arweave.init({ host: 'arweave.net', protocol: 'https', port: 443 }); async function createContract() { // Let's first create the contract transaction. const contractTx = await arweave.createTransaction({ data: contractSource }, wallet); contractTx.addTag('App-Name', 'SmartWeaveContractSource'); contractTx.addTag('App-Version', '0.3.0'); contractTx.addTag('Content-Type', 'application/javascript'); // Sign await arweave.transactions.sign(contractTx, wallet); // Let's keep the ID, it will be used in the state transaction. const contractSourceTxId = contractTx.id; // Deploy the contract source await arweave.transactions.post(contractTx); // Now, let's create the Initial State transaction const initialStateTx = await arweave.createTransaction({ data: initialState }, wallet); initialState.addTag('App-Name', 'SmartWeaveContract'); initialState.addTag('App-Version', '0.3.0'); initialState.addTag('Contract-Src', contractSourceTxId); initialState.addTag('Content-Type', 'application/json'); // Sign await arweave.transactions.sign(initialState, wallet); const initialStateTxId = initialState.id; // Deploy await arweave.transactions.post(initialState); } createContract(); ``` ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/Example-deployment-script/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/Example-deployment-script/"
  },"4": {
    "doc": "General definition of an atomic NFT",
    "title": "General definition of an atomic NFT",
    "content": "## General definition of an atomic NFT {: .fs-9 } Atomic NFT is a standard for Non Fungible Tokens (NFTs) on Koii. Anyone can utilize the Atomic NFT standard to tokenize and create digital assets and buy, sell & auction assets utilizing the marketplace(). Alongside its smart contract creation platform Atomic Market. Atomic Market is a shared liquidity NFT market smart contract that is used by multiple websites to try and provide users the best possible experience. Shared liquidity means that everything which is listed on one market also shows on all other markets. [Visit Market](https://koi.rocks){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 target=\"_blank\" } ",
    "url": "https://atomicnft.com/docs/General-definition-of-an-atomic-NFT/",
    "relUrl": "/docs/General-definition-of-an-atomic-NFT/"
  },"5": {
    "doc": "How to deploy an Atomic NFT",
    "title": "How to deploy an Atomic NFT",
    "content": "## How to deploy an Atomic NFT {: .fs-9 } Write something here... {: .fs-6 .fw-400 } (Go to koi.rocks › download Finnie › upload wallet › deploy NFT › hooray!) {: .fs-3 .fw-400 } ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT"
  },"6": {
    "doc": "How to get AR",
    "title": "How to get AR",
    "content": "# How to get AR [Get some AR here](https://koi.rocks/faucet){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 target=\"_blank\" } ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/How-to-get-AR/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/How-to-get-AR/"
  },"7": {
    "doc": "Key Security",
    "title": "Key Security",
    "content": "# Key Security {: .fs-9 } ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/Key-Security/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/Key-Security/"
  },"8": {
    "doc": "Owning and Storing Atomic NFTs",
    "title": "Owning and Storing Atomic NFTs",
    "content": "## Owning and Storing Atomic NFTs {: .fs-9 } Write something here... {: .fs-6 .fw-400 } (explain more) {: .fs-3 .fw-400 } ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs"
  },"9": {
    "doc": "Required features of an atomic NFT",
    "title": "Required features of an atomic NFT",
    "content": "### Required features of an atomic NFT {: .fs-9 } ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT"
  },"10": {
    "doc": "The Finnie Wallet",
    "title": "The Finnie Wallet",
    "content": "# The Finnie Wallet {: .fs-9 } ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/The-Finnie-Wallet/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/The-Finnie-Wallet/"
  },"11": {
    "doc": "Transfer",
    "title": "Transfer",
    "content": "## Transfer {: .fs-9 } The 'transfer' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash export default function transfer(state, action) { const input = action.input; const caller = action.caller; const target = input.target; ContractAssert(target, `No target specified.`); ContractAssert(caller !== target, `Invalid token transfer.`); const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const balances = state.balances; ContractAssert( caller in balances && balances[caller] >= qty, `Caller has insufficient funds` ); balances[caller] -= qty; if (!(target in balances)) { balances[target] = 0; } balances[target] += qty; state.balances = balances; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Transfer/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Transfer/"
  },"12": {
    "doc": "Using-a-Wallet",
    "title": "Using-a-Wallet",
    "content": "# Using a Wallet {: .fs-9 } [Add Finnie Wallet](https://chrome.google.com/webstore/detail/finnie/cjmkndjhnagcfbpiemnkdpomccnjblmj){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 target=\"_blank\" } ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/Using-a-Wallet/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/Using-a-Wallet/"
  },"13": {
    "doc": "What is Arweave?",
    "title": "What is Arweave?",
    "content": "# What is Arweave? ## Arweave makes information permanence sustainable. {: .fs-7 .fw-500 } Arweave is a new type of storage that backs data with sustainable and perpetual endowments, allowing users and developers to truly store data forever – for the very first time. As a collectively owned hard drive that never forgets, Arweave allows us to remember and preserve valuable information, apps, and history indefinitely. By preserving history, it prevents others from rewriting it. ## Welcome to the permaweb. {: .fs-7 .fw-500 } On top of the Arweave network lives the permaweb: a global, community-owned web that anyone can contribute to or get paid to maintain. The permaweb looks just like the normal web, but all of its content – from images to full web apps – is permanent, retrieved quickly, and decentralized – forever. Just as the first web connected people over vast distances, the permaweb connects people over extremely long periods of time. No more 404s. No more stealth edits. No more web apps that decline in quality. ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/What-is-Arweave/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/What-is-Arweave/"
  },"14": {
    "doc": "What is Smartweave?",
    "title": "What is Smartweave?",
    "content": "# What is Smartweave? SmartWeave is an approach to smart contracts that allows the blockchain to dispense with gas fees and only requires a smart contract’s code to be run as often as it’s needed and not by every node on the network. “SmartWeave is a new smart contract language environment built on top of the Arweave network,” Arweave’s Sam Williams told CoinDesk. “It uses this novel type of evaluation called ‘lazy evaluation’ to move the computational burden of smart-contract execution from the nodes in the network to the users of the smart contract.” ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/What-is-smartweave/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/What-is-smartweave/"
  },"15": {
    "doc": "Home",
    "title": "Home",
    "content": "# Welcome to Atomic NFT {: .fs-9 } Write something here... {: .fs-6 .fw-300 } [Add Finnie](https://chrome.google.com/webstore/detail/finnie/cjmkndjhnagcfbpiemnkdpomccnjblmj){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 target=\"_blank\" } [Try yourself](https://koi.rocks){: .btn .fs-5 .mb-4 .mb-md-0 target=\"_blank\"} --- ## Getting started ### Dependencies ",
    "url": "https://atomicnft.com/",
    "relUrl": "/"
  },"16": {
    "doc": "Lock",
    "title": "Lock",
    "content": "## Lock {: .fs-9 } The 'Lock' method contains a function for The section below shows an example of a possible lock function: ```bash export default function lock(state, action) { const input = action.input; const caller = action.caller; const delegatedOwner = input.delegatedOwner; ContractAssert(delegatedOwner, `No target specified.`); const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const balances = state.balances; ContractAssert( caller in balances && balances[caller] >= qty, `Caller has insufficient funds` ); balances[caller] -= qty; if (!(delegatedOwner in balances)) { balances[delegatedOwner] = 0; } balances[delegatedOwner] += qty; const ethOwnerAddress = input.ethOwnerAddress; ContractAssert(ethOwnerAddress, `No ethereum address specified.`); state.ethOwnerAddress = ethOwnerAddress; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/lock/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/lock/"
  },"17": {
    "doc": "Unlock",
    "title": "Unlock",
    "content": "## Unlock {: .fs-9 } The 'Unlock' method contains a function for The section below shows an example of a possible lock function: ```bash export default function unlock(state, action) { const input = action.input; const balances = state.balances; const addresses = Object.keys(balances); for (const address of addresses) { delete balances[address]; } const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const arweaveAddress = input.arweaveAddress; ContractAssert(arweaveAddress, `No arweaveAddress specified.`); if (!(arweaveAddress in balances)) { balances[arweaveAddress] = 0; } balances[arweaveAddress] += qty; delete state.ethOwnerAddress; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/unlock/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/unlock/"
  }
}
