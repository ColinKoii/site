{"0": {
    "doc": "Balance",
    "title": "Balance",
    "content": "## Balance {: .fs-9 } The 'balance' method contains a function for retrieving the balance of a specific wallet from the state of the NFT object. The section below shows an example of a possible balance function: ```bash export default function balance(state, action) { const input = action.input; const caller = action.caller; let target; if (input.target) { target = input.target; } else { target = caller; } const ticker = state.ticker; const balances = state.balances; ContractAssert( typeof target === \"string\", `Must specify target to retrieve balance for.` ); return { result: { target, ticker, balance: target in balances ? balances[target] : 0 } }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Balance/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Balance/"
  },"1": {
    "doc": "(optional) Bridging Support",
    "title": "(optional) Bridging Support",
    "content": "## Bridging Support {: .fs-9 } The 'bridging support' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Bridging-Support/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Bridging-Support/"
  },"2": {
    "doc": "(optional) Dynamic",
    "title": "(optional) Dynamic",
    "content": "## Dynamic {: .fs-9 } The 'dynamic' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Dynamic/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Dynamic/"
  },"3": {
    "doc": "Example deployment script",
    "title": "Example deployment script",
    "content": "# Example deployment script This one was founded at [here](https://cedriking.medium.com/lets-buidl-smartweave-contracts-6353d22c4561){:target = \"_blank\"}. ```bash import Arweave from 'arweave'; const arweave = Arweave.init({ host: 'arweave.net', protocol: 'https', port: 443 }); async function createContract() { // Let's first create the contract transaction. const contractTx = await arweave.createTransaction({ data: contractSource }, wallet); contractTx.addTag('App-Name', 'SmartWeaveContractSource'); contractTx.addTag('App-Version', '0.3.0'); contractTx.addTag('Content-Type', 'application/javascript'); // Sign await arweave.transactions.sign(contractTx, wallet); // Let's keep the ID, it will be used in the state transaction. const contractSourceTxId = contractTx.id; // Deploy the contract source await arweave.transactions.post(contractTx); // Now, let's create the Initial State transaction const initialStateTx = await arweave.createTransaction({ data: initialState }, wallet); initialState.addTag('App-Name', 'SmartWeaveContract'); initialState.addTag('App-Version', '0.3.0'); initialState.addTag('Contract-Src', contractSourceTxId); initialState.addTag('Content-Type', 'application/json'); // Sign await arweave.transactions.sign(initialState, wallet); const initialStateTxId = initialState.id; // Deploy await arweave.transactions.post(initialState); } createContract(); ``` ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/Example-deployment-script/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/Example-deployment-script/"
  },"4": {
    "doc": "General definition of an atomic NFT",
    "title": "General definition of an atomic NFT",
    "content": "## General definition of an atomic NFT {: .fs-9 } Atomic NFT is a standard for Non Fungible Tokens (NFTs) on Koii. Anyone can utilize the Atomic NFT standard to tokenize and create digital assets and buy, sell & auction assets utilizing the marketplace(). Alongside its smart contract creation platform Atomic Market. Atomic Market is a shared liquidity NFT market smart contract that is used by multiple websites to try and provide users the best possible experience. Shared liquidity means that everything which is listed on one market also shows on all other markets. [Visit Market](https://koi.rocks){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 target=\"_blank\" } ",
    "url": "https://atomicnft.com/docs/General-definition-of-an-atomic-NFT/",
    "relUrl": "/docs/General-definition-of-an-atomic-NFT/"
  },"5": {
    "doc": "How to deploy an Atomic NFT",
    "title": "How to deploy an Atomic NFT",
    "content": "## How to deploy an Atomic NFT {: .fs-9 } Write something here... {: .fs-6 .fw-400 } (Go to koi.rocks › download Finnie › upload wallet › deploy NFT › hooray!) {: .fs-3 .fw-400 } ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT"
  },"6": {
    "doc": "How to get AR",
    "title": "How to get AR",
    "content": "# How to get AR [Get some AR here](https://koi.rocks/faucet){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 target=\"_blank\" } ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/How-to-get-AR/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/How-to-get-AR/"
  },"7": {
    "doc": "Key Security",
    "title": "Key Security",
    "content": "# Key Security {: .fs-9 } One of the primary reasons blockchain systems have received widespread attention has been their ability to provide secure networks without trusting a central entity. Despite this, there are some limitations of the blockchain approach, and understanding them is key to properly deploying new products and solutions. ## MANAGING YOUR KEYS ### INDIVIDUAL ACCOUNT COMPROMISE IN THE PAST, AN 8 DIGIT PASSWORD WAS NEARLY IMPOSSIBLE TO CRACK, BUT IN 2020, IT’S NOT ONLY POSSIBLE - IT’S EASY. {: .text-blue-000 } Staying safe online is about more than just a strong secret key. Avoiding illegal torrents and other un-verified downloads is a good place to start, but when it comes to corporate e-governance, things get even more complicated. Software review, careful audits, and change management should all be high priorities for any decentralized projects. Storing private keys in a publicly accessible place can introduce a crime of opportunity when not already present. In addition, a weak quality password could make it possible for any computer with a modern video card to crack your password. The problem is made worse by the existence of inexpensive, on-demand processing, for example, through a traditional cloud provider. Finally, ensuring your source of entropy/randomness was sufficient during account creation may not be something the end-user has control over, however, this can be a major weakness after keys were already thought to have been secured. Aside from actual wallets being hacked, there is always the risk that a developer’s Github account could be compromised, in which case a bad actor could add malicious code into the client software for the blockchain network. In the past, bad actors have gone as far as to join the development communities for modules which were used in other software, such as the cryptographic libraries used in the Bitcoin client, and sought to create security loopholes by pushing malicious code to those dependencies. - While core blockchain code doesn't often malfunction, wallet and client software is an easy target for many hackers. It's important to always verify that the wallet software you are downloading matches the publisher's hash. Most the iOS and Google Play app stores do this automatically, but we must be particularly careful with desktop applications. {: .text-purple-000} ### CRYPTOCURRENCY WALLETS - IT’S IMPORTANT TO HAVE THE RIGHT TOOL FOR THE JOB. {: .text-blue-000 } Although the software we use to manage cryptocurrencies is called a “wallet”, no actual value is held in the wallet itself. Instead, it is a management interface for interacting with your private keys and blockchain networks. Modern cryptocurrency wallets are more like a chequebook, which doesn’t hold any actual assets directly, but can sign them to another person. Because balances are tracked by the blockchain itself, cryptocurrency wallets mainly automate the process of signing cryptographic messages and broadcasting them to peer nodes in the network. ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/Key-Security/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/Key-Security/"
  },"8": {
    "doc": "Owning and Storing Atomic NFTs",
    "title": "Owning and Storing Atomic NFTs",
    "content": "## Owning and Storing Atomic NFTs {: .fs-9 } The Koii Framework makes all content user-owned and decentralized stored, allowing for new types of platforms and ecosystems. {: .fs-6 .fw-400 } ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs"
  },"9": {
    "doc": "Required features of an atomic NFT",
    "title": "Required features of an atomic NFT",
    "content": "### Required features of an atomic NFT {: .fs-9 } ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT"
  },"10": {
    "doc": "The Finnie Wallet",
    "title": "The Finnie Wallet",
    "content": "# The Finnie Wallet {: .fs-9 } The Finnie Wallet is the newest tool from the Koii Network, where you can create NFTs in under 1 minute, for less than $0.01. (Setup takes about 2 minutes.) There are a few really cool features with the Finnie Wallet that make NFTs and digital art more accessible to wider audiences (see this [blog post](https://blog.koii.network/Almost-Infinite/) about Atomic NFTs to learn more): - Minting Atomic NFTs is extremely affordable - Finnie uses [Arweave](https://www.arweave.org/) to store your content forever - Content posted earns KOII tokens for every view - Cross-publish your NFTs to traditional sites like facebook, youtube, or instagram (Coming soon) - Create custom galleries and sell your NFTs direct to collectors with 0% commission (Coming soon) - Multiple blockchain networks in one (Coming soon) These are just a few of our favorite features, more tutorials will be published soon with all the cool things Finnie can help you do! We’ll cover 4 things in this tutorial. Feel free to skip ahead if you’ve already completed any of the steps. 1. [Get Finnie (download the extension)](#part-1-get-finnie) 2. [Add a Wallet](#part-2-add-a-wallet) 3. [Get some free KOII](#part-3-get-some-koii) 4. [Create an NFT](#part-4-create-an-nft) *Note:* Our friends at Brokenomics made a great video of this tutorial [here](https://www.youtube.com/watch?v=TUt2gZzHM1E){:target=\"_blank\"}. If you want to read through for yourself, here's the full steps: # Part 1: Get Finnie First, head to the [Google Web Chrome](https://koii.me/Finnieblogpost) store to install the Finnie extension. (You can also find it by searching “Finnie” or “Koii” in the Chrome Store. It is the only result, as of this writing, or [click here](https://koii.me/Finnieblogpost)) Click “Add to Chrome” on the right side. ![Add to chrome](/assets/images/finnieTour/1.png) After a few moments, the Finnie logo will appear in your browser bar in the top right corner of your screen. ![Browser Icon Appears](/assets/images/finnieTour/2.png) Click on the puzzle piece to show your Chrome extension settings, then click the pin icon next to Finnie. This ensures you’ll always be able to see Finnie when you need to. ![Pin the extension so it doesn't disappear](/assets/images/finnieTour/3.png) # Part 2: Add a Wallet Now that we have the extension all ready to go, let’s add a wallet to safely hold all our NFTs! Click on the Finnie icon in your extensions. You will see a dropdown with three different ways to add a wallet. 1. [Import with a seed phrase](#import-with-a-seed-phrase): if you have an existing AR wallet that you created using a seed phrase, click this one 2. [Upload a .JSON wallet file](#upload-a-json-wallet-file): if you have an existing wallet that only has a .JSON file, this option is for you 3. [Create a new wallet](#create-a-new-wallet): if you don’t have an AR wallet yet, this is the place to start! Soon, you will be able to import non-Arweave wallets & keys. Sign up for the Koii newsletter and follow us on [Twitter](https://koii.me/TwitterFinnieblogpost) so you can find out as soon as we release new features like cross-chain compatibility. ![The first step is to connect a wallet](/assets/images/finnieTour/4.png) ## Import with a seed phrase Click on the first option, “Import with a seed phrase,” then paste your existing seed phrase into the top box. Next create a new, secure password. Make sure you keep this password somewhere safe, and don’t share it. Confirm your password, then check the “Terms of Service” box (after you read and agree to the Terms, of course). Click “Import Wallet.” Now you’re all set with your imported wallet! Click “Finish” when you’re ready. ## Upload a .JSON wallet file Click on the second option, “Upload a .JSON wallet file.” You have two options here: drag and drop your wallet file from your file explorer or desktop, or click the box to open the file selector. Once you’ve added your .JSON wallet file, create a new, secure password. Make sure you keep this password somewhere safe, and don’t share it. Confirm your password, then check the “Terms of Service” box (after you read and agree to the Terms, of course). Click “Import Wallet.” Now you’re all set with your imported wallet! Click “Finish” when you’re ready. ## Create a new wallet Click on the third option, “Get a new wallet.” Create a new, secure password. Make sure you keep this password somewhere safe, and don’t share it. Confirm your password, then check the “Terms of Service” box (after you read and agree to the Terms, of course). It may take a few moments to generate the new wallet, but there is a very cute (in my opinion) loading fish while you wait. Now you’ll see a “Secret Backup Phrase” window. This is where you will find your 12-word backup phrase. The phrase makes it easy to back up and restore your account, but anyone with access to this phrase can steal from your wallet. It is vital that you keep it safe. ![The first step is to connect a wallet](/assets/images/finnieTour/5.png) Click in the darkened box to reveal your secret words, then copy and store them somewhere safe like a secure password manager or on a physical piece of paper that won’t get lost. Once you have your phrase safely copied somewhere, click “Continue” and select the words in the correct order. After selecting the words, click “Confirm.” Congratulations, you have a new wallet that’s ready to create NFTs! # Part 3: Get some KOII Already have KOII and AR? Skip ahead to [Create an NFT](#part-4-create-an-nft). Now that you have a Koii-compatible wallet, you’ll need some KOII tokens (and a tiny bit of AR to pay for storage costs). Click on the Finnie extension icon. When you see the dropdown, click the button near the top that says “My Gallery.” ![The first step is to connect a wallet](/assets/images/finnieTour/6.png) Your (likely empty) gallery will open in a new window. Read the Beta version notes and then click out of the box. If you don’t have KOII, there will be a button in the top right corner of the page that says, “No KOII? Get some.” ![Click the button to visit the faucet.](/assets/images/finnieTour/7.png) This button will take you to the KOII faucet. You’ll skip step #1 (click “Skip ahead”) because you already have the Finnie Wallet. Then click “Connect Wallet” in the top right corner of the page to visit the faucet. ![The first step is to connect a wallet.](/assets/images/finnieTour/9.png) You will get a pop up from Finnie asking you to verify the connection to koi.rocks (this is a security feature so apps can’t connect to your wallet without your consent). Click “Connect” on the first screen (left), then again on the second screen (right). This is an extra confirmation layer so that you know what each app has access to within your wallet. For example, koi.rocks can only see the public addresses of your key. ![Authorize and connect the portal.](/assets/images/finnieTour/10.png) ![Authorize and connect the portal.](/assets/images/finnieTour/11.png) Once Finnie is connected, click “Tweet to Verify.” This button will prompt a popup from Twitter, confirming your wallet address and that you are a real person. Don’t alter the tweet, as it may cause verification issues. After you tweet, click “Get KOII.” It may take a few moments for the tokens to appear in your wallet, but don’t worry— KOII and a small amount of AR (for storage fees) are on their way. # Part 4: Create an NFT After you visit the faucet, it’s time to create your first Atomic NFT! This part is super quick and simple. There are two very easy ways to start. First, you can drag and drop any media file directly onto the browser page. (Please note that at this time, Finnie can only accept file sizes up to 15MB.) ![Drag a file to make an NFT.](/assets/images/finnieTour/11.png) The second way is by clicking on the plus (+) button in the left-side menu. From here, you can drag and drop or click to open your file explorer. ![Drag a file to make an NFT.](/assets/images/finnieTour/12.png) After you upload your media file, add the title of the piece, your desired username, a description, and any tags you want associated with your NFT. You can separate tags with commas or by clicking “enter” after each one. Then click “Create New NFT.” ![Submit the form to create your NFT.](/assets/images/finnieTour/13.png) Now just confirm that all your details are correct, and we’ll be on our way! If you have a referral code from a friend (or enemy, we don’t judge), enter it in the box on the left. Click “Confirm Registration.” After a few moments, your transaction will appear. Make sure to click the “Share” button to send it to everyone you know. The more people who see it, the more attention rewards (KOII tokens) you will receive! ![Boom - you're done. Now your NFT is stored permanently, and ready to be traded or sold.](/assets/images/finnieTour/14.png) **Better media makes a better world; decentralization lets you own your share of it.** Join the revolution and pre-register to run a node [here](https://docs.google.com/forms/d/e/1FAIpQLSduDTdxD3dDOvcbIcKlG7JWOsnDFVZFdLy0J38q_OOzUC3okA/viewform){:target=\"\\_blank\"} To start earning attention rewards on your NFTs, register them now at [koi.rocks](https://koi.rocks/contents){:target=\"\\_blank\"} Continue the conversation and join Koii's official community [Telegram](https://t.me/joinchat/OEHs_8T9-8ZhZmU5) channel, Koii's [Discord](https://discord.com/invite/SDwgnjxNEn), and follow us on [Twitter](https://twitter.com/KoiiNetwork). ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/The-Finnie-Wallet/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/The-Finnie-Wallet/"
  },"11": {
    "doc": "Transfer",
    "title": "Transfer",
    "content": "## Transfer {: .fs-9 } The 'transfer' method contains a function for allowing the contract to transfer your token and must be approved. The section below shows an example of a possible transfer function: ```bash export default function transfer(state, action) { const input = action.input; const caller = action.caller; const target = input.target; ContractAssert(target, `No target specified.`); ContractAssert(caller !== target, `Invalid token transfer.`); const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const balances = state.balances; ContractAssert( caller in balances && balances[caller] >= qty, `Caller has insufficient funds` ); balances[caller] -= qty; if (!(target in balances)) { balances[target] = 0; } balances[target] += qty; state.balances = balances; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/Transfer/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/Transfer/"
  },"12": {
    "doc": "Using-a-Wallet",
    "title": "Using-a-Wallet",
    "content": "# Using a Wallet {: .fs-9 } [Add Finnie Wallet](https://chrome.google.com/webstore/detail/finnie/cjmkndjhnagcfbpiemnkdpomccnjblmj){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 target=\"_blank\" } ",
    "url": "https://atomicnft.com/docs/Owning-and-Storing-Atomic-NFTs/Using-a-Wallet/",
    "relUrl": "/docs/Owning-and-Storing-Atomic-NFTs/Using-a-Wallet/"
  },"13": {
    "doc": "What is Arweave?",
    "title": "What is Arweave?",
    "content": "# What is Arweave? ## Arweave makes information permanence sustainable. {: .fs-7 .fw-500 } Arweave is a new type of storage that backs data with sustainable and perpetual endowments, allowing users and developers to truly store data forever – for the very first time. As a collectively owned hard drive that never forgets, Arweave allows us to remember and preserve valuable information, apps, and history indefinitely. By preserving history, it prevents others from rewriting it. ## Welcome to the permaweb. {: .fs-7 .fw-500 } On top of the Arweave network lives the permaweb: a global, community-owned web that anyone can contribute to or get paid to maintain. The permaweb looks just like the normal web, but all of its content – from images to full web apps – is permanent, retrieved quickly, and decentralized – forever. Just as the first web connected people over vast distances, the permaweb connects people over extremely long periods of time. No more 404s. No more stealth edits. No more web apps that decline in quality. ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/What-is-Arweave/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/What-is-Arweave/"
  },"14": {
    "doc": "What is Smartweave?",
    "title": "What is Smartweave?",
    "content": "# What is Smartweave? SmartWeave is an approach to smart contracts that allows the blockchain to dispense with gas fees and only requires a smart contract’s code to be run as often as it’s needed and not by every node on the network. “SmartWeave is a new smart contract language environment built on top of the Arweave network,” Arweave’s Sam Williams told CoinDesk. “It uses this novel type of evaluation called ‘lazy evaluation’ to move the computational burden of smart-contract execution from the nodes in the network to the users of the smart contract.” ",
    "url": "https://atomicnft.com/docs/How-to-deploy-an-Atomic-NFT/What-is-smartweave/",
    "relUrl": "/docs/How-to-deploy-an-Atomic-NFT/What-is-smartweave/"
  },"15": {
    "doc": "Home",
    "title": "Home",
    "content": "# Welcome to Atomic NFTs {: .fs-9 } Write something here... {: .fs-6 .fw-300 } [Add Finnie](https://chrome.google.com/webstore/detail/finnie/cjmkndjhnagcfbpiemnkdpomccnjblmj){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 target=\"_blank\" } [Try yourself](https://koi.rocks){: .btn .fs-5 .mb-4 .mb-md-0 target=\"_blank\"} --- ## Getting started ### Dependencies ",
    "url": "https://atomicnft.com/",
    "relUrl": "/"
  },"16": {
    "doc": "Lock",
    "title": "Lock",
    "content": "## Lock {: .fs-9 } The 'Lock' method contains a function for The section below shows an example of a possible lock function: ```bash export default function lock(state, action) { const input = action.input; const caller = action.caller; const delegatedOwner = input.delegatedOwner; ContractAssert(delegatedOwner, `No target specified.`); const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const balances = state.balances; ContractAssert( caller in balances && balances[caller] >= qty, `Caller has insufficient funds` ); balances[caller] -= qty; if (!(delegatedOwner in balances)) { balances[delegatedOwner] = 0; } balances[delegatedOwner] += qty; const ethOwnerAddress = input.ethOwnerAddress; ContractAssert(ethOwnerAddress, `No ethereum address specified.`); state.ethOwnerAddress = ethOwnerAddress; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/lock/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/lock/"
  },"17": {
    "doc": "Unlock",
    "title": "Unlock",
    "content": "## Unlock {: .fs-9 } The 'Unlock' method contains a function for The section below shows an example of a possible lock function: ```bash export default function unlock(state, action) { const input = action.input; const balances = state.balances; const addresses = Object.keys(balances); for (const address of addresses) { delete balances[address]; } const qty = input.qty; ContractAssert(qty, `No quantity specified.`); const arweaveAddress = input.arweaveAddress; ContractAssert(arweaveAddress, `No arweaveAddress specified.`); if (!(arweaveAddress in balances)) { balances[arweaveAddress] = 0; } balances[arweaveAddress] += qty; delete state.ethOwnerAddress; return { state }; } ``` This is only an example of the implementation, but can provides the default functionality needed for interoperability with existing Atomic NFT standards. ",
    "url": "https://atomicnft.com/docs/Required-features-of-an-atomic-NFT/unlock/",
    "relUrl": "/docs/Required-features-of-an-atomic-NFT/unlock/"
  }
}
